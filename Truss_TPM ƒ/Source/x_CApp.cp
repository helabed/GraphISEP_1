/******************************************************************************
 x_CApp.cp

        CApp "Lower-Layer" Application Class

  Copyright © 1996 Esoft International. All rights reserved.

  Generated by Visual Architectª 12:55 AM Thu, Mar 21, 1996

  This file is rewritten each time you generate code. You should not
  make changes to this file; changes should go in the CApp.cp
  file, instead.

  If you want to change how Visual Architect generates this file, you can
  change the template for this file. It is "_App_cp" in the Visual Architect
  Templates folder.

 ******************************************************************************/

#include "x_CApp.h"

#include "CApp.h"

#include "References.h"
#include "CMain.h"
#include <CBartender.h>
#include <Commands.h>
#include <CDesktop.h>
#include <CFile.h>
#include <CFWDesktop.h>
#include <CList.h>
#include <Packages.h>
#include <TBUtilities.h>
#include <TCLForceReferences.h>

#include "CMain.h"

extern OSType    gSignature;      /* Creator for Application's files  */
extern CBartender  *gBartender;    /* Manages all menus        */
extern CDesktop    *gDesktop;      /* The visible Desktop        */

#define ALRTabout 500


TCL_DEFINE_CLASS_M1(x_CApp, CApplication);

/**** C O N S T R U C T I O N / D E S T R U C T I O N   M E T H O D S ****/


/******************************************************************************
 Ix_CApp

    Initialize an Application.
 ******************************************************************************/

void  x_CApp::Ix_CApp(short extraMasters, Size aRainyDayFund,
                  Size aCriticalBalance, Size aToolboxBalance)

{
  IApplication(extraMasters, aRainyDayFund, aCriticalBalance, aToolboxBalance);
}


/******************************************************************************
 SetUpFileParameters  {OVERRIDE}

  Specify the kinds of files your application opens
 ******************************************************************************/

void x_CApp::SetUpFileParameters()
{
  CApplication::SetUpFileParameters();

    // File types as defined in CApp.h

  sfNumTypes = kNumFileTypes;
  sfFileTypes[0] = kFileType1;
  sfFileTypes[1] = kFileType2;
  sfFileTypes[2] = kFileType3;
  sfFileTypes[3] = kFileType4;
  gSignature = 'HANS';
}


/******************************************************************************
 SetUpMenus {OVERRIDE}

    Set up the menus after first creating any floating/tearoff
    windows. The latter must be done before the bartender inits.
 ******************************************************************************/

void x_CApp::SetUpMenus()
{

  CApplication::SetUpMenus();
}


/******************************************************************************
 ForceClassReferences  {OVERRIDE}

  Reference classes that might do object I/O.
 ******************************************************************************/

void x_CApp::ForceClassReferences(void)

{
  CApplication::ForceClassReferences();

                      /* From References.c      */
  ReferenceStdClasses();          /*   See template file Ref    */

}


/**** C O M M A N D   M E T H O D S ****/


/******************************************************************************
 DoCommand  {OVERRIDE}

  Handle application commands
 ******************************************************************************/

void x_CApp::DoCommand(long theCommand)

{
  switch (theCommand)
  {
    case cmdAbout:

        // Simple About alert. Subclasses will probably
        // trap this command to do something sexier.

      PositionDialog('ALRT', ALRTabout);
      InitCursor();
      ParamText("\pCApp", "\pEsoft International", "\p", "\p");
      Alert(ALRTabout, NULL);
      break;

    default:
      CApplication::DoCommand(theCommand);
      break;
  }
}


/**** D O C U M E N T   M E T H O D S ****/


/******************************************************************************
 CreateDocument  {OVERRIDE}

  Make a new document when user chooses New from file menu.
  This method is entirely generic except for the document class.
 ******************************************************************************/

void x_CApp::CreateDocument()

{
  CDocument  *volatile theDocument = NULL;

  theDocument = TCL_NEW(CMain,());
  try_
  {
    ((CMain*) theDocument)->ICMain();
    theDocument->NewFile();
  }
  catch_all_()
  {
    TCLForgetObject(theDocument);
    throw_same_();
  }
  end_try_
}


/******************************************************************************
 OpenDocument  {OVERRIDE}

  Open a document when user chooses Open from file menu.
  For multiple document types, this method assumes that each
  document is associated with a single file type.
 ******************************************************************************/

void x_CApp::OpenDocument(SFReply *macSFReply)

{
  CDocument  *volatile theDocument = NULL;

  theDocument = TCL_NEW(CMain,());
  try_
  {
    ((CMain*) theDocument)->ICMain();
    theDocument->OpenFile(macSFReply);
  }
  catch_all_()
  {
    TCLForgetObject(theDocument);
    throw_same_();
  }
  end_try_
}




/******************************************************************************
 FileAlreadyOpen

  If file already in use return TRUE and bring owning document's
  window to the foreground.  Sent from document before opening.
 ******************************************************************************/

  static Boolean EqualFile(CDirector *obj, long param)
  {
    FSSpec    theFileSpec;
    CFile    *theFile;
    FSSpec    *theParam = (FSSpec*) param;

    if (member(obj, CDocument))
    {
      theFile = ((CDocument*)obj)->itsFile;
      if (theFile == NULL)
        return FALSE;
      theFile->GetFSSpec(&theFileSpec);
      return theFileSpec.vRefNum == theParam->vRefNum
        && theFileSpec.parID == theParam->parID
        && !IUEqualString(theFileSpec.name, theParam->name);
    }
    return FALSE;
  }

Boolean x_CApp::FileAlreadyOpen(
  FSSpec    *fileSpec)

{
  CDirector  *theDirector = NULL;

  if (itsDirectors)            /* Search for matching file    */
    theDirector = (CDirector*) itsDirectors->FindItem1(EqualFile, (long) fileSpec);
  if (theDirector)            /* If find one, bring to front  */
    theDirector->GetWindow()->Select();
  return theDirector != NULL;        /* Tell caller          */
}

